package Entity
	import public Vectors
	import public EntityManagement
	import LinkedListModule
	import Debug
	import Arena
	import Terrain
	
	public enum Side
		LEFT
		RIGHT
		BOTTOM
		TOP
	
	public abstract class Entity
		use LinkedListModule
		
		vec3 position
		
		real radius
		real mass = .1
		player owner
		real terrainZ
		
		boolean isStatic = false
		boolean active = true
		boolean done = false
		
		construct( vec3 pos, real radius, player p )
			position = pos
			owner = p
			this.radius = radius
			entityCount++
			currentEntityCount++
			print("current Entities: " + currentEntityCount.toString() )
			
			
		function outOfBounds(Side side)
			switch side
				case Side.LEFT
					position.x = currentArena.minX + 1.
				case Side.RIGHT
					position.x = currentArena.maxX - 1.
				case Side.TOP
					position.y = currentArena.minY + 1.
				case Side.BOTTOM
					position.y = currentArena.maxY - 1.
					
					
		function checkCollision( Entity e ) returns boolean
			if (position.x-e.position.x).squared() + (position.y-e.position.y).squared() <= (radius+e.radius).squared()
				return true
			return false
			
		abstract function onGround()
		abstract function onCollision(Entity e)
		abstract function inAir()

		
		function update()
			if position.x - radius < currentArena.minX
				outOfBounds( Side.LEFT )
			else if position.x + radius > currentArena.maxX
				outOfBounds( Side.RIGHT )
			else if position.y - radius < currentArena.minY
				outOfBounds( Side.TOP )
			else if position.y + radius > currentArena.maxY
				outOfBounds( Side.BOTTOM )
				
			terrainZ = getTerrainZ( position.x, position.y )
			
			if position.z <= terrainZ + 1.
				onGround()
			else
				inAir()
			
		ondestroy
			print("yes")
			currentEntityCount--
	
		
	public abstract class DynamicEntity extends Entity
		vec3 velocity
		
		real factor = 1.

		construct( vec3 pos, real radius, player p )
			super(pos, radius, p)
			velocity = vec3(0,0,0)
			dynamicEntityCount++
			
		function addForce(real x, real y, real z)
			velocity += vec3(x,y,z)
		
		function setForce(real x, real y, real z)
			velocity = vec3(x,y,z)
			
		override function update()
			super.update()
			position += velocity
		
		// calculates a collision with a static entity and changes the velocity accordingly	
		function collideWithStatic(Entity staticEntity)
			vec2 deltaNorm = (staticEntity.position.toVec2() - position.toVec2()).norm()			
	        let speedTowardsStatic = velocity.toVec2().dot(deltaNorm)
	        if speedTowardsStatic > 0
	        	velocity += (deltaNorm * speedTowardsStatic * -2.).toVec3()
	        	
		// calculates a collision with an other dynamic entity and updates the velocity 
		// of _both_ entities accordingly	        	
		function collideWithDynamicEntity(DynamicEntity other)
			let pos1 = position.toVec2()
			let pos2 = other.position.toVec2()
			let vel1 = velocity.toVec2()
			let vel2 = other.velocity.toVec2()
			
			let delta = (pos2 - pos1)
			let deltaLen = delta.length()
			let deltaNorm = delta * (1/deltaLen)			
	        real speed1central = vel1.dot(deltaNorm)
	        real speed2central = vel2.dot(deltaNorm)

	        let futurePos1 = pos1 + vel1*0.01
	        let futurePos2 = pos2 + vel2*0.01
	        let futureDelta = (futurePos2 - futurePos1)
	        
	        if futureDelta.length() < deltaLen  
		        // split the velocities in a part linear to the delta vector (central) and an orthogonal part 
		        let vel1central = deltaNorm*speed1central
		        let vel1orthogonal = vel1 - vel1central
		        
		        let vel2central = deltaNorm*speed2central
		        let vel2orthogonal = vel2 - vel2central
		        
		        // the central velocities are exchanged, the orthogonal velocities remain unchanged
		        // this is similar to the collision with a wall where the velocity which is parallel to 
		        // the wall is unchanged, whereas the other part of the velocity is inversed
		        velocity += (vel2central - vel1central).toVec3()
		        other.velocity += (vel1central - vel2central).toVec3()
			
		
			
	public class UnitEntity extends DynamicEntity
		unit actor
		
		construct( vec3 pos, real radius, unit u, player p )
			super(pos,radius, p)
			print(position.toString())
			actor = u
			actor.addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)
			owner = GetOwningPlayer(u)
			actor.setUserData(this castTo int)
			
			unitEntityCount++
			
		function setNewPos(vec3 pos)
			position = pos
			actor.setX(pos.x).setY(pos.y).setFlyHeight(pos.z, 0)
			
		override function onGround()
			super.onGround()
			position = vec3( actor.getX(), actor.getY(), terrainZ )
			
		override function inAir()
			super.inAir()
			position = vec3( actor.getX(), actor.getY(), position.z )
			
		override function onCollision(Entity e)
		
			
		override function update()
			super.update()
			SetUnitX( actor, position.x )
            SetUnitY( actor, position.y )
            SetUnitFlyHeight( actor, position.z - getTerrainZ(position.x, position.y ), .0 )
				
			
		ondestroy
			actor.remove()
			
endpackage
